
/*
   Copyright (c) 2014-2015 Malte Hildingsson, malte (at) afterwi.se

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
 */

#ifndef AW_BASE64_H
#define AW_BASE64_H

#include <sys/types.h>

#if __GNUC__
# define _base64_alwaysinline inline __attribute__((always_inline))
# define _base64_unused __attribute__((__unused__))
#elif _MSC_VER
# define _base64_alwaysinline __forceinline
# define _base64_unused
#endif

#if _MSC_VER
# define _base64_restrict __restrict
#else
# define _base64_restrict __restrict__
#endif

#if __GNUC__
# define _base64_likely(x) __builtin_expect(!!(x), 1)
# define _base64_unlikely(x) __builtin_expect(!!(x), 0)
#else
# define _base64_likely(x) (x)
# define _base64_unlikely(x) (x)
#endif

#ifdef __cplusplus
extern "C" {
#endif

static _base64_alwaysinline size_t base64len(size_t n) {
	return (n + 2) / 3 * 4;
}

static size_t base64(char *buf, size_t nbuf, const unsigned char *p, size_t n) _base64_unused;
static size_t base64(char *buf, size_t nbuf, const unsigned char *p, size_t n) {
	const char t[64] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	size_t i, m = base64len(n);
	unsigned x;

	if (nbuf >= m)
		for (i = 0; i < n; ++i) {
			x = p[i] << 16;
			x |= (++i < n ? p[i] : 0) << 8;
			x |= (++i < n ? p[i] : 0) << 0;

			*buf++ = t[x >> 3 * 6 & 0x3f];
			*buf++ = t[x >> 2 * 6 & 0x3f];
			*buf++ = (((n - 0 - i) >> 31) & '=') |
				(~((n - 0 - i) >> 31) & t[x >> 1 * 6 & 0x3f]);
			*buf++ = (((n - 1 - i) >> 31) & '=') |
				(~((n - 1 - i) >> 31) & t[x >> 0 * 6 & 0x3f]);
		}

	return m;
}

static const unsigned char _unbase64tab[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3e, 0x3e, 0x00, 0x3f,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
	0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x00, 0x00, 0x00, 0x3f, 0x00,
	0x00, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
	0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* state must be initialized to zero when starting a new stream */

static ssize_t unbase64(
		unsigned char *_base64_restrict p, size_t n, const char *_base64_restrict str,
		size_t *_base64_restrict len, int *_base64_restrict state) _base64_unused;
static ssize_t unbase64(
		unsigned char *_base64_restrict p, size_t n, const char *_base64_restrict str,
		size_t *_base64_restrict len, int *_base64_restrict state) {
	size_t m = 0;
	for (; *len != 0 && *str != 0; --*len, ++str) {
		if (_base64_unlikely(*str == 0x3d)) {
			do --*len, ++str; while (*len != 0 && *str == 0x3d);
			break;
		}
		*state = (((*state << 6) | _unbase64tab[(int) *str]) & 0xfff) | ((*state + 0x6000) & ~0xfff);
		if (_base64_unlikely(*state >= 0x8000)) {
			if (*state -= 0x8000, m < n)
				p[m] = (unsigned char) ((*state & 0xfff) >> (*state >> 12));
			++m;
		}
	}
	return m;
}

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* AW_BASE64_H */

